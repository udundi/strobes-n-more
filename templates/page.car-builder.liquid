<!-- page.car-builder.liquid -->

{{ 'car-builder.css' | asset_url | stylesheet_tag }}

{% comment %}
  Get car model from URL parameter or page handle
  Expected URL: /pages/car-builder?model=ford-interceptor
{% endcomment %}

{% assign car_model = request.url | split: 'model=' | last | split: '&' | first %}
{% if car_model == blank %}
  {% assign car_model = page.handle | replace: 'car-builder-', '' %}
{% endif %}

{% comment %}
  Get collections based on car model
  Expected collection structure: car-model-view-area
  Example: ford-interceptor-front-f1
{% endcomment %}

{% assign model_collections = collections | where: 'handle', 'contains', car_model %}

<div class="car-builder-container">
  <!-- Page Header -->
  <div class="page-header">
    <h1 class="car-model-title">{{ car_model | replace: '-', ' ' | capitalize | default: page.title }}</h1>
  </div>

  <!-- Main Content Area -->
  <div class="car-builder-main">
    <!-- Left Column -->
    <div class="left-column">
      <!-- Car Image Container -->
      <div class="car-image-container">
        <div class="car-image-wrapper">
          <img id="carImage" 
               src="{{ car_model | append: '-front.jpg' | asset_url }}" 
               alt="{{ car_model | replace: '-', ' ' | capitalize }} View" 
               class="car-image"
               onerror="this.src='{{ 'car-default.jpg' | asset_url }}'">
          
          <!-- Area Hotspots - will be populated dynamically -->
          <div class="area-hotspots" id="areaHotspots">
            <!-- Hotspots will be generated by JavaScript based on current view -->
          </div>
        </div>
      </div>

      <!-- Sub-Collections Navigation -->
      <div class="sub-collections" id="subCollections">
        {% comment %}
          Get unique view types for this car model
          Expected: ford-interceptor-front, ford-interceptor-left, etc.
        {% endcomment %}
        {% assign views = '' %}
        {% for collection in model_collections %}
          {% assign parts = collection.handle | split: '-' %}
          {% if parts.size >= 3 %}
            {% assign view = parts[2] %}
            {% unless views contains view %}
              {% assign views = views | append: view | append: ',' %}
            {% endunless %}
          {% endif %}
        {% endfor %}
        
        {% assign view_array = views | split: ',' | compact %}
        {% for view in view_array %}
          {% assign is_first = forloop.first %}
          <button class="sub-collection-btn {% if is_first %}active{% endif %}" 
                  data-view="{{ view }}" 
                  data-collection="{{ car_model }}-{{ view }}">
            {{ view | capitalize }}
          </button>
        {% endfor %}
      </div>
    </div>

    <!-- Right Column -->
    <div class="right-column">
      <div class="products-container">
        <div class="products-header">
          <h3>Available Parts</h3>
          <p class="current-selection">Viewing: <span id="currentArea">Loading...</span></p>
        </div>
        
        <div id="productsList" class="products-list">
          <!-- Products will be loaded here via JavaScript -->
          <div class="loading">Loading products...</div>
        </div>
      </div>
    </div>
  </div>

  <!-- Cart Section -->
  <div class="cart-section">
    <div class="cart-header">
      <h2>Your Cart</h2>
      <button id="clearCart" class="clear-cart-btn">Clear All</button>
    </div>
    
    <div id="cartItems" class="cart-items">
      <!-- Cart items will be populated here -->
      <div class="empty-cart">Your cart is empty</div>
    </div>
    
    <div class="cart-footer">
      <div class="cart-total">
        <strong>Total: <span id="cartTotal">$0.00</span></strong>
      </div>
      <button id="checkoutBtn" class="checkout-btn" disabled>
        Proceed to Checkout
      </button>
    </div>
  </div>
</div>

<!-- Pass Shopify data to JavaScript -->
<script>
  window.shopifyData = {
    carModel: '{{ car_model }}',
    collections: {
      {% for collection in model_collections %}
        "{{ collection.handle }}": {
          id: {{ collection.id }},
          title: "{{ collection.title | escape }}",
          handle: "{{ collection.handle }}",
          products: [
            {% for product in collection.products %}
              {
                id: {{ product.id }},
                title: "{{ product.title | escape }}",
                handle: "{{ product.handle }}",
                price: {{ product.price | money_without_currency | remove: ',' }},
                available: {{ product.available }},
                featured_image: "{{ product.featured_image | img_url: '300x300' }}",
                variants: [
                  {% for variant in product.variants %}
                    {
                      id: {{ variant.id }},
                      price: {{ variant.price | money_without_currency | remove: ',' }},
                      available: {{ variant.available }}
                    }{% unless forloop.last %},{% endunless %}
                  {% endfor %}
                ]
              }{% unless forloop.last %},{% endunless %}
            {% endfor %}
          ]
        }{% unless forloop.last %},{% endunless %}
      {% endfor %}
    }
  };
</script>

<script>
class CarBuilder {
  constructor() {
    this.carModel = window.shopifyData.carModel;
    this.collections = window.shopifyData.collections;
    this.currentView = null;
    this.currentArea = null;
    this.cart = [];
    this.imageCache = new Map();
    this.productCache = new Map();
    
    this.init();
  }

  init() {
    this.setupInitialState();
    this.bindEvents();
    this.loadCart();
    this.preloadImages();
  }

  preloadImages() {
    // Preload all view images
    const views = Array.from(document.querySelectorAll('.sub-collection-btn')).map(btn => btn.dataset.view);
    views.forEach(view => {
      const img = new Image();
      img.src = `{{ "' + this.carModel + '-' + view + '.jpg" | asset_url }}`;
      this.imageCache.set(view, img.src);
    });
  }

  setupInitialState() {
    // Get the first available view
    const firstViewBtn = document.querySelector('.sub-collection-btn.active');
    if (firstViewBtn) {
      this.currentView = firstViewBtn.dataset.view;
      this.updateHotspots(this.currentView);
      this.loadProducts();
    }
  }

  bindEvents() {
    // Sub-collection buttons
    document.querySelectorAll('.sub-collection-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        this.switchView(e.target.dataset.view);
      });
    });

    // Cart actions
    document.getElementById('clearCart').addEventListener('click', () => {
      this.clearCart();
    });

    document.getElementById('checkoutBtn').addEventListener('click', () => {
      this.checkout();
    });
  }

  async switchView(view) {
    if (this.currentView === view) return;
    
    this.currentView = view;
    
    // Update active sub-collection button
    document.querySelectorAll('.sub-collection-btn').forEach(btn => {
      btn.classList.remove('active');
    });
    document.querySelector(`[data-view="${view}"]`).classList.add('active');

    // Update car image using cached version if available
    const imageUrl = this.imageCache.get(view) || `{{ "' + this.carModel + '-' + view + '.jpg" | asset_url }}`;
    const carImage = document.getElementById('carImage');
    carImage.src = imageUrl;
    carImage.onerror = function() {
      this.src = '{{ "car-default.jpg" | asset_url }}';
    };

    // Update hotspots and load products
    this.updateHotspots(view);
  }

  updateHotspots(view) {
    const hotspotsContainer = document.getElementById('areaHotspots');
    const areas = this.getAreasForView(view);
    
    hotspotsContainer.innerHTML = '';
    
    if (areas.length === 0) {
      this.currentArea = null;
      this.loadProducts();
      return;
    }

    areas.forEach((area, index) => {
      const hotspot = document.createElement('button');
      hotspot.className = `hotspot ${index === 0 ? 'active' : ''}`;
      hotspot.dataset.area = area;
      hotspot.textContent = area.toUpperCase();
      
      // Position hotspots in a grid pattern
      const row = Math.floor(index / 3);
      const col = index % 3;
      hotspot.style.top = `${20 + (row * 25)}%`;
      hotspot.style.left = `${15 + (col * 25)}%`;
      
      hotspot.addEventListener('click', (e) => {
        this.switchArea(e.target.dataset.area);
      });
      
      hotspotsContainer.appendChild(hotspot);
    });

    // Auto-select first area
    if (areas.length > 0) {
      this.switchArea(areas[0]);
    }
  }

  getAreasForView(view) {
    const viewCollectionPrefix = `${this.carModel}-${view}-`;
    const areas = [];
    
    Object.keys(this.collections).forEach(handle => {
      if (handle.startsWith(viewCollectionPrefix)) {
        const area = handle.replace(viewCollectionPrefix, '');
        if (area && !areas.includes(area)) {
          areas.push(area);
        }
      }
    });
    
    return areas.sort();
  }

  switchArea(area) {
    this.currentArea = area;
    
    // Update active hotspot
    document.querySelectorAll('.hotspot').forEach(hotspot => {
      hotspot.classList.remove('active');
    });
    const activeHotspot = document.querySelector(`[data-area="${area}"]`);
    if (activeHotspot) {
      activeHotspot.classList.add('active');
    }

    // Update current selection display
    document.getElementById('currentArea').textContent = area ? area.toUpperCase() : 'None';

    // Load products for this area
    this.loadProducts();
  }

  loadProducts() {
    const productsList = document.getElementById('productsList');
    productsList.innerHTML = '<div class="loading">Loading products...</div>';
    
    if (!this.currentView || !this.currentArea) {
      productsList.innerHTML = '<div class="no-products">Please select a car section and area</div>';
      return;
    }

    const collectionHandle = `${this.carModel}-${this.currentView}-${this.currentArea}`;
    
    // Check cache first
    if (this.productCache.has(collectionHandle)) {
      this.renderProducts(this.productCache.get(collectionHandle));
      return;
    }

    const collection = this.collections[collectionHandle];
    
    if (!collection || !collection.products || collection.products.length === 0) {
      productsList.innerHTML = '<div class="no-products">No products available for this area</div>';
      return;
    }

    // Cache the products
    this.productCache.set(collectionHandle, collection.products);
    this.renderProducts(collection.products);
  }

  renderProducts(products) {
    const productsList = document.getElementById('productsList');
    
    const productsHTML = products.map(product => `
      <div class="product-item">
        <div class="product-image">
          <img src="${product.featured_image || '{{ "product-placeholder.png" | asset_url }}'}" 
               alt="${product.title}"
               onerror="this.src='{{ 'product-placeholder.png' | asset_url }}'">
        </div>
        <div class="product-info">
          <h4 class="product-title">${product.title}</h4>
          <div class="product-price">${(product.price / 100).toFixed(2)}</div>
          ${product.available ? 
            `<button class="add-to-cart-btn" onclick="carBuilder.addToCart(${product.variants[0].id}, '${product.title.replace(/'/g, "\\'")}', ${product.price}, '${product.featured_image}')">
              Add to Cart
            </button>` :
            `<button class="add-to-cart-btn" disabled>Out of Stock</button>`
          }
        </div>
      </div>
    `).join('');

    productsList.innerHTML = productsHTML;
  }

  // Batch cart operations
  async batchCartOperation(operations) {
    try {
      const response = await fetch('/cart/update.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          updates: operations.reduce((acc, op) => {
            acc[op.id] = op.quantity;
            return acc;
          }, {})
        })
      });

      if (response.ok) {
        this.updateCartDisplay();
        this.saveCart();
      } else {
        throw new Error('Failed to update cart');
      }
    } catch (error) {
      console.error('Error updating cart:', error);
      this.showMessage('Error updating cart', 'error');
    }
  }

  async addToCart(variantId, title, price, image) {
    const existingItem = this.cart.find(item => item.variantId === variantId);
    
    if (existingItem) {
      await this.updateQuantity(variantId, existingItem.quantity + 1);
    } else {
      try {
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            id: variantId,
            quantity: 1
          })
        });

        if (response.ok) {
          this.cart.push({
            variantId: variantId,
            title: title,
            price: price / 100,
            image: image,
            quantity: 1
          });
          
          this.updateCartDisplay();
          this.saveCart();
          this.showMessage('Product added to cart!');
        } else {
          throw new Error('Failed to add to cart');
        }
      } catch (error) {
        console.error('Error adding to cart:', error);
        this.showMessage('Error adding product to cart', 'error');
      }
    }
  }

  updateCartDisplay() {
    const cartItems = document.getElementById('cartItems');
    const cartTotal = document.getElementById('cartTotal');
    const checkoutBtn = document.getElementById('checkoutBtn');
    
    if (this.cart.length === 0) {
      cartItems.innerHTML = '<div class="empty-cart">Your cart is empty</div>';
      cartTotal.textContent = '$0.00';
      checkoutBtn.disabled = true;
      return;
    }

    const cartHTML = this.cart.map(item => `
      <div class="cart-item">
        <div class="cart-item-info">
          <span class="cart-item-title">${item.title}</span>
          <span class="cart-item-price">${item.price.toFixed(2)}</span>
        </div>
        <div class="cart-item-controls">
          <div class="quantity-controls">
            <button onclick="carBuilder.updateQuantity(${item.variantId}, ${item.quantity - 1})">-</button>
            <span class="quantity">${item.quantity}</span>
            <button onclick="carBuilder.updateQuantity(${item.variantId}, ${item.quantity + 1})">+</button>
          </div>
          <button class="remove-item" onclick="carBuilder.removeFromCart(${item.variantId})">Remove</button>
        </div>
      </div>
    `).join('');

    cartItems.innerHTML = cartHTML;
    
    const total = this.cart.reduce((sum, item) => sum + (item.price * item.quantity), 0);
    cartTotal.textContent = `${total.toFixed(2)}`;
    checkoutBtn.disabled = false;
  }

  async updateQuantity(variantId, newQuantity) {
    if (newQuantity <= 0) {
      this.removeFromCart(variantId);
      return;
    }
    
    try {
      // Update Shopify cart
      await fetch('/cart/update.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: variantId,
          quantity: newQuantity
        })
      });

      // Update local cart
      const item = this.cart.find(item => item.variantId === variantId);
      if (item) {
        item.quantity = newQuantity;
        this.updateCartDisplay();
        this.saveCart();
      }
    } catch (error) {
      console.error('Error updating quantity:', error);
      this.showMessage('Error updating quantity', 'error');
    }
  }

  async removeFromCart(variantId) {
    try {
      // Remove from Shopify cart
      await fetch('/cart/update.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: variantId,
          quantity: 0
        })
      });

      // Remove from local cart
      this.cart = this.cart.filter(item => item.variantId !== variantId);
      this.updateCartDisplay();
      this.saveCart();
    } catch (error) {
      console.error('Error removing from cart:', error);
      this.showMessage('Error removing item', 'error');
    }
  }

  async clearCart() {
    try {
      await fetch('/cart/clear.js', {
        method: 'POST'
      });

      this.cart = [];
      this.updateCartDisplay();
      this.saveCart();
      this.showMessage('Cart cleared!');
    } catch (error) {
      console.error('Error clearing cart:', error);
      this.showMessage('Error clearing cart', 'error');
    }
  }

  saveCart() {
    sessionStorage.setItem('carBuilderCart', JSON.stringify(this.cart));
  }

  loadCart() {
    const savedCart = sessionStorage.getItem('carBuilderCart');
    if (savedCart) {
      this.cart = JSON.parse(savedCart);
      this.updateCartDisplay();
    }
  }

  checkout() {
    window.location.href = '/cart';
  }

  showMessage(message, type = 'success') {
    const messageDiv = document.createElement('div');
    messageDiv.className = `${type}-message`;
    messageDiv.textContent = message;
    document.body.appendChild(messageDiv);
    
    setTimeout(() => {
      messageDiv.remove();
    }, 3000);
  }
}

// Initialize the car builder when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
  window.carBuilder = new CarBuilder();
});
</script>
